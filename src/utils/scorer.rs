use super::displayable_bytes;
use std::collections::HashMap;

pub fn score_for(xored_bytes: &[u8]) -> f32 {
    if !displayable_bytes::is_displayable_bytes(xored_bytes) {
        return 0.0;
    }

    let xored_bytes_len: f32 = xored_bytes.len() as f32;
    let mut histogram: HashMap<u8, f32> = HashMap::new();

    for xored_byte in xored_bytes.iter() {
        let mut char_byte = xored_byte.to_ascii_lowercase();
        if !char_byte.is_ascii_alphabetic() && char_byte != b' ' {
            char_byte = b'?';
        }

        let counts = histogram.entry(char_byte).or_insert(0.0);
        *counts += 1.0;
    }

    for (_, val) in histogram.iter_mut() {
        *val /= xored_bytes_len;
    }

    let mut score = 1.0 / chi_squared(&histogram);
    if *histogram.get(&b'?').unwrap_or(&0.0) < 0.05 {
        score *= 2.0
    }

    score
}

const ENGLISH_HISTOGRAM: [(u8, f32); 25] = [
    (b' ', 0.14),
    (b'e', 0.12),
    (b't', 0.09),
    (b'a', 0.08),
    (b'o', 0.07),
    (b'i', 0.06),
    (b'n', 0.06),
    (b's', 0.06),
    (b'h', 0.06),
    (b'r', 0.05),
    (b'd', 0.04),
    (b'l', 0.04),
    (b'c', 0.02),
    (b'u', 0.02),
    (b'm', 0.02),
    (b'w', 0.02),
    (b'f', 0.02),
    (b'g', 0.02),
    (b'y', 0.01),
    (b'p', 0.01),
    (b'b', 0.01),
    (b'v', 0.01),
    (b'k', 0.01),
    (b'j', 0.01),
    (b'?', 0.09), // the "other" bucket
];

fn chi_squared(histo_b: &HashMap<u8, f32>) -> f32 {
    ENGLISH_HISTOGRAM.iter().fold(0.0, |score, (key, val_eng)| {
        let val_b = histo_b.get(key).unwrap_or(&0.0);

        score + (val_eng - val_b).powi(2) / val_eng
    })
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn score_for_from_console() {
        assert_eq!(
            score_for(&[
                100, 107, 121, 104, 32, 39, 105, 32, 10, 32, 98, 101, 32, 108, 115, 111, 104, 111,
                101, 32, 114, 104, 116, 116, 110, 100, 104, 107, 32, 32, 105, 105, 100, 101, 46,
                32, 110, 121, 115, 101, 111, 110, 111, 111, 97, 32, 99, 108, 32, 112, 111, 108, 39,
                106, 110, 103, 116, 111, 111, 32, 104, 101, 106, 99, 97, 110, 104, 100, 33, 114,
                99, 105, 116, 98, 111, 97, 32, 101, 97, 101, 110, 119, 115, 103, 115, 116, 101,
                116, 44, 97, 121, 116, 101, 102, 32, 109, 97, 121, 80
            ]),
            4.0115366
        );
        assert_eq!(
            score_for(&[
                109, 32, 114, 97, 68, 72, 103, 32, 109, 32, 110, 121, 116, 71, 101, 111, 111, 39,
                104, 109, 115, 105, 32, 32, 105, 32, 111, 116, 99, 107, 32, 100, 97, 102, 73, 68,
                89, 108, 101, 107, 101, 101, 114, 111, 116, 32, 101, 32, 32, 115, 114, 32, 67, 105,
                110, 111, 114, 111, 46, 101, 97, 110, 32, 39, 105, 32, 32, 32, 117, 101, 116, 104,
                111, 97, 116, 89, 112, 116, 32, 100, 98, 101, 97, 111, 32, 32, 121, 32, 32, 98,
                115, 32, 44, 121, 32, 99, 104, 109, 32
            ]),
            4.489753
        );
        assert_eq!(
            score_for(&[
                73, 39, 109, 32, 98, 97, 99, 107, 32, 97, 110, 100, 32, 73, 39, 109, 32, 114, 105,
                110, 103, 105, 110, 39, 32, 116, 104, 101, 32, 98, 101, 108, 108, 32, 10, 65, 32,
                114, 111, 99, 107, 105, 110, 39, 32, 111, 110, 32, 116, 104, 101, 32, 109, 105,
                107, 101, 32, 119, 104, 105, 108, 101, 32, 116, 104, 101, 32, 102, 108, 121, 32,
                103, 105, 114, 108, 115, 32, 121, 101, 108, 108, 32, 10, 73, 110, 32, 101, 99, 115,
                116, 97, 115, 121, 32, 105, 110, 32, 116, 104, 101, 32, 98, 97, 99, 107, 32, 111,
                102, 32, 109, 101, 32, 10, 87, 101, 108, 108, 32, 116, 104, 97, 116, 39, 115, 32,
                109, 121, 32, 68, 74, 32, 68, 101, 115, 104, 97, 121, 32, 99, 117, 116, 116, 105,
                110, 39, 32, 97, 108, 108, 32, 116, 104, 101, 109, 32, 90, 39, 115, 32, 10, 72,
                105, 116, 116, 105, 110, 39, 32, 104, 97, 114, 100, 32, 97, 110, 100, 32, 116, 104,
                101, 32, 103, 105, 114, 108, 105, 101, 115, 32, 103, 111, 105, 110, 39, 32, 99,
                114, 97, 122, 121, 32, 10, 86, 97, 110, 105, 108, 108, 97, 39, 115, 32, 111, 110,
                32, 116, 104, 101, 32, 109, 105, 107, 101, 44, 32, 109, 97, 110, 32, 73, 39, 109,
                32, 110, 111, 116, 32, 108, 97, 122, 121, 46, 32, 10, 10, 73, 39, 109, 32, 108,
                101, 116, 116, 105, 110, 39, 32, 109, 121, 32, 100, 114, 117, 103, 32, 107, 105,
                99, 107, 32, 105, 110, 32, 10, 73, 116, 32, 99, 111, 110, 116, 114, 111, 108, 115,
                32, 109, 121, 32, 109, 111, 117, 116, 104, 32, 97, 110, 100, 32, 73, 32, 98, 101,
                103, 105, 110, 32, 10, 84, 111, 32, 106, 117, 115, 116, 32, 108, 101, 116, 32, 105,
                116, 32, 102, 108, 111, 119, 44, 32, 108, 101, 116, 32, 109, 121, 32, 99, 111, 110,
                99, 101, 112, 116, 115, 32, 103, 111, 32, 10, 77, 121, 32, 112, 111, 115, 115, 101,
                39, 115, 32, 116, 111, 32, 116, 104, 101, 32, 115, 105, 100, 101, 32, 121, 101,
                108, 108, 105, 110, 39, 44, 32, 71, 111, 32, 86, 97, 110, 105, 108, 108, 97, 32,
                71, 111, 33, 32, 10, 10, 83, 109, 111, 111, 116, 104, 32, 39, 99, 97, 117, 115,
                101, 32, 116, 104, 97, 116, 39, 115, 32, 116, 104, 101, 32, 119, 97, 121, 32, 73,
                32, 119, 105, 108, 108, 32, 98, 101, 32, 10, 65, 110, 100, 32, 105, 102, 32, 121,
                111, 117, 32, 100, 111, 110, 39, 116, 32, 103, 105, 118, 101, 32, 97, 32, 100, 97,
                109, 110, 44, 32, 116, 104, 101, 110, 32, 10, 87, 104, 121, 32, 121, 111, 117, 32,
                115, 116, 97, 114, 105, 110, 39, 32, 97, 116, 32, 109, 101, 32, 10, 83, 111, 32,
                103, 101, 116, 32, 111, 102, 102, 32, 39, 99, 97, 117, 115, 101, 32, 73, 32, 99,
                111, 110, 116, 114, 111, 108, 32, 116, 104, 101, 32, 115, 116, 97, 103, 101, 32,
                10, 84, 104, 101, 114, 101, 39, 115, 32, 110, 111, 32, 100, 105, 115, 115, 105,
                110, 39, 32, 97, 108, 108, 111, 119, 101, 100, 32, 10, 73, 39, 109, 32, 105, 110,
                32, 109, 121, 32, 111, 119, 110, 32, 112, 104, 97, 115, 101, 32, 10, 84, 104, 101,
                32, 103, 105, 114, 108, 105, 101, 115, 32, 115, 97, 32, 121, 32, 116, 104, 101,
                121, 32, 108, 111, 118, 101, 32, 109, 101, 32, 97, 110, 100, 32, 116, 104, 97, 116,
                32, 105, 115, 32, 111, 107, 32, 10, 65, 110, 100, 32, 73, 32, 99, 97, 110, 32, 100,
                97, 110, 99, 101, 32, 98, 101, 116, 116, 101, 114, 32, 116, 104, 97, 110, 32, 97,
                110, 121, 32, 107, 105, 100, 32, 110, 39, 32, 112, 108, 97, 121, 32, 10, 10, 83,
                116, 97, 103, 101, 32, 50, 32, 45, 45, 32, 89, 101, 97, 32, 116, 104, 101, 32, 111,
                110, 101, 32, 121, 97, 39, 32, 119, 97, 110, 110, 97, 32, 108, 105, 115, 116, 101,
                110, 32, 116, 111, 32, 10, 73, 116, 39, 115, 32, 111, 102, 102, 32, 109, 121, 32,
                104, 101, 97, 100, 32, 115, 111, 32, 108, 101, 116, 32, 116, 104, 101, 32, 98, 101,
                97, 116, 32, 112, 108, 97, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 10, 83,
                111, 32, 73, 32, 99, 97, 110, 32, 102, 117, 110, 107, 32, 105, 116, 32, 117, 112,
                32, 97, 110, 100, 32, 109, 97, 107, 101, 32, 105, 116, 32, 115, 111, 117, 110, 100,
                32, 103, 111, 111, 100, 32, 10, 49, 45, 50, 45, 51, 32, 89, 111, 32, 45, 45, 32,
                75, 110, 111, 99, 107, 32, 111, 110, 32, 115, 111, 109, 101, 32, 119, 111, 111,
                100, 32, 10, 70, 111, 114, 32, 103, 111, 111, 100, 32, 108, 117, 99, 107, 44, 32,
                73, 32, 108, 105, 107, 101, 32, 109, 121, 32, 114, 104, 121, 109, 101, 115, 32, 97,
                116, 114, 111, 99, 105, 111, 117, 115, 32, 10, 83, 117, 112, 101, 114, 99, 97, 108,
                97, 102, 114, 97, 103, 105, 108, 105, 115, 116, 105, 99, 101, 120, 112, 105, 97,
                108, 105, 100, 111, 99, 105, 111, 117, 115, 32, 10, 73, 39, 109, 32, 97, 110, 32,
                101, 102, 102, 101, 99, 116, 32, 97, 110, 100, 32, 116, 104, 97, 116, 32, 121, 111,
                117, 32, 99, 97, 110, 32, 98, 101, 116, 32, 10, 73, 32, 99, 97, 110, 32, 116, 97,
                107, 101, 32, 97, 32, 102, 108, 121, 32, 103, 105, 114, 108, 32, 97, 110, 100, 32,
                109, 97, 107, 101, 32, 104, 101, 114, 32, 119, 101, 116, 46, 32, 10, 10, 73, 39,
                109, 32, 108, 105, 107, 101, 32, 83, 97, 109, 115, 111, 110, 32, 45, 45, 32, 83,
                97, 109, 115, 111, 110, 32, 116, 111, 32, 68, 101, 108, 105, 108, 97, 104, 32, 10,
                84, 104, 101, 114, 101, 39, 115, 32, 110, 111, 32, 100, 101, 110, 121, 105, 110,
                39, 44, 32, 89, 111, 117, 32, 99, 97, 110, 32, 116, 114, 121, 32, 116, 111, 32,
                104, 97, 110, 103, 32, 10, 66, 117, 116, 32, 121, 111, 117, 39, 108, 108, 32, 107,
                101, 101, 112, 32, 116, 114, 121, 105, 110, 39, 32, 116, 111, 32, 103, 101, 116,
                32, 109, 121, 32, 115, 116, 121, 108, 101, 32, 10, 79, 118, 101, 114, 32, 97, 110,
                100, 32, 111, 118, 101, 114, 44, 32, 112, 114, 97, 99, 116, 105, 99, 101, 32, 109,
                97, 107, 101, 115, 32, 112, 101, 114, 102, 101, 99, 116, 32, 10, 66, 117, 116, 32,
                110, 111, 116, 32, 105, 102, 32, 121, 111, 117, 39, 114, 101, 32, 97, 32, 108, 111,
                97, 102, 101, 114, 46, 32, 10, 10, 89, 111, 117, 39, 108, 108, 32, 103, 101, 116,
                32, 110, 111, 119, 104, 101, 114, 101, 44, 32, 110, 111, 32, 112, 108, 97, 99, 101,
                44, 32, 110, 111, 32, 116, 105, 109, 101, 44, 32, 110, 111, 32, 103, 105, 114, 108,
                115, 32, 10, 83, 111, 111, 110, 32, 45, 45, 32, 79, 104, 32, 109, 121, 32, 71, 111,
                100, 44, 32, 104, 111, 109, 101, 98, 111, 100, 121, 44, 32, 121, 111, 117, 32, 112,
                114, 111, 98, 97, 98, 108, 121, 32, 101, 97, 116, 32, 10, 83, 112, 97, 103, 104,
                101, 116, 116, 105, 32, 119, 105, 116, 104, 32, 97, 32, 115, 112, 111, 111, 110,
                33, 32, 67, 111, 109, 101, 32, 111, 110, 32, 97, 110, 100, 32, 115, 97, 121, 32,
                105, 116, 33, 32, 10, 10, 86, 73, 80, 46, 32, 86, 97, 110, 105, 108, 108, 97, 32,
                73, 99, 101, 32, 121, 101, 112, 44, 32, 121, 101, 112, 44, 32, 73, 39, 109, 32, 99,
                111, 109, 105, 110, 39, 32, 104, 97, 114, 100, 32, 108, 105, 107, 101, 32, 97, 32,
                114, 104, 105, 110, 111, 32, 10, 73, 110, 116, 111, 120, 105, 99, 97, 116, 105,
                110, 103, 32, 115, 111, 32, 121, 111, 117, 32, 115, 116, 97, 103, 103, 101, 114,
                32, 108, 105, 107, 101, 32, 97, 32, 119, 105, 110, 111, 32, 10, 83, 111, 32, 112,
                117, 110, 107, 115, 32, 115, 116, 111, 112, 32, 116, 114, 121, 105, 110, 103, 32,
                97, 110, 100, 32, 103, 105, 114, 108, 32, 115, 116, 111, 112, 32, 99, 114, 121,
                105, 110, 39, 32, 10, 86, 97, 110, 105, 108, 108, 97, 32, 73, 99, 101, 32, 105,
                115, 32, 115, 101, 108, 108, 105, 110, 39, 32, 97, 110, 100, 32, 121, 111, 117, 32,
                112, 101, 111, 112, 108, 101, 32, 97, 114, 101, 32, 98, 117, 121, 105, 110, 39, 32,
                10, 39, 67, 97, 117, 115, 101, 32, 119, 104, 121, 32, 116, 104, 101, 32, 102, 114,
                101, 97, 107, 115, 32, 97, 114, 101, 32, 106, 111, 99, 107, 105, 110, 39, 32, 108,
                105, 107, 101, 32, 67, 114, 97, 122, 121, 32, 71, 108, 117, 101, 32, 10, 77, 111,
                118, 105, 110, 39, 32, 97, 110, 100, 32, 103, 114, 111, 111, 118, 105, 110, 39, 32,
                116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 115, 105, 110, 103, 32, 97, 108,
                111, 110, 103, 32, 10, 65, 108, 108, 32, 116, 104, 114, 111, 117, 103, 104, 32,
                116, 104, 101, 32, 103, 104, 101, 116, 116, 111, 32, 103, 114, 111, 111, 118, 105,
                110, 39, 32, 116, 104, 105, 115, 32, 104, 101, 114, 101, 32, 115, 111, 110, 103,
                32, 10, 78, 111, 119, 32, 121, 111, 117, 39, 114, 101, 32, 97, 109, 97, 122, 101,
                100, 32, 98, 121, 32, 116, 104, 101, 32, 86, 73, 80, 32, 112, 111, 115, 115, 101,
                46, 32, 10, 10, 83, 116, 101, 112, 112, 105, 110, 39, 32, 115, 111, 32, 104, 97,
                114, 100, 32, 108, 105, 107, 101, 32, 97, 32, 71, 101, 114, 109, 97, 110, 32, 78,
                97, 122, 105, 32, 10, 83, 116, 97, 114, 116, 108, 101, 100, 32, 98, 121, 32, 116,
                104, 101, 32, 98, 97, 115, 101, 115, 32, 104, 105, 116, 116, 105, 110, 39, 32, 103,
                114, 111, 117, 110, 100, 32, 10, 84, 104, 101, 114, 101, 39, 115, 32, 110, 111, 32,
                116, 114, 105, 112, 112, 105, 110, 39, 32, 111, 110, 32, 109, 105, 110, 101, 44,
                32, 73, 39, 109, 32, 106, 117, 115, 116, 32, 103, 101, 116, 116, 105, 110, 39, 32,
                100, 111, 119, 110, 32, 10, 83, 112, 97, 114, 107, 97, 109, 97, 116, 105, 99, 44,
                32, 73, 39, 109, 32, 104, 97, 110, 103, 105, 110, 39, 32, 116, 105, 103, 104, 116,
                32, 108, 105, 107, 101, 32, 97, 32, 102, 97, 110, 97, 116, 105, 99, 32, 10, 89,
                111, 117, 32, 116, 114, 97, 112, 112, 101, 100, 32, 109, 101, 32, 111, 110, 99,
                101, 32, 97, 110, 100, 32, 73, 32, 116, 104, 111, 117, 103, 104, 116, 32, 116, 104,
                97, 116, 32, 10, 89, 111, 117, 32, 109, 105, 103, 104, 116, 32, 104, 97, 118, 101,
                32, 105, 116, 32, 10, 83, 111, 32, 115, 116, 101, 112, 32, 100, 111, 119, 110, 32,
                97, 110, 100, 32, 108, 101, 110, 100, 32, 109, 101, 32, 121, 111, 117, 114, 32,
                101, 97, 114, 32, 10, 39, 56, 57, 32, 105, 110, 32, 109, 121, 32, 116, 105, 109,
                101, 33, 32, 89, 111, 117, 44, 32, 39, 57, 48, 32, 105, 115, 32, 109, 121, 32, 121,
                101, 97, 114, 46, 32, 10, 10, 89, 111, 117, 39, 114, 101, 32, 119, 101, 97, 107,
                101, 110, 105, 110, 39, 32, 102, 97, 115, 116, 44, 32, 89, 79, 33, 32, 97, 110,
                100, 32, 73, 32, 99, 97, 110, 32, 116, 101, 108, 108, 32, 105, 116, 32, 10, 89,
                111, 117, 114, 32, 98, 111, 100, 121, 39, 115, 32, 103, 101, 116, 116, 105, 110,
                39, 32, 104, 111, 116, 44, 32, 115, 111, 44, 32, 115, 111, 32, 73, 32, 99, 97, 110,
                32, 115, 109, 101, 108, 108, 32, 105, 116, 32, 10, 83, 111, 32, 100, 111, 110, 39,
                116, 32, 98, 101, 32, 109, 97, 100, 32, 97, 110, 100, 32, 100, 111, 110, 39, 116,
                32, 98, 101, 32, 115, 97, 100, 32, 10, 39, 67, 97, 117, 115, 101, 32, 116, 104,
                101, 32, 108, 121, 114, 105, 99, 115, 32, 98, 101, 108, 111, 110, 103, 32, 116,
                111, 32, 73, 67, 69, 44, 32, 89, 111, 117, 32, 99, 97, 110, 32, 99, 97, 108, 108,
                32, 109, 101, 32, 68, 97, 100, 32, 10, 89, 111, 117, 39, 114, 101, 32, 112, 105,
                116, 99, 104, 105, 110, 39, 32, 97, 32, 102, 105, 116, 44, 32, 115, 111, 32, 115,
                116, 101, 112, 32, 98, 97, 99, 107, 32, 97, 110, 100, 32, 101, 110, 100, 117, 114,
                101, 32, 10, 76, 101, 116, 32, 116, 104, 101, 32, 119, 105, 116, 99, 104, 32, 100,
                111, 99, 116, 111, 114, 44, 32, 73, 99, 101, 44, 32, 100, 111, 32, 116, 104, 101,
                32, 100, 97, 110, 99, 101, 32, 116, 111, 32, 99, 117, 114, 101, 32, 10, 83, 111,
                32, 99, 111, 109, 101, 32, 117, 112, 32, 99, 108, 111, 115, 101, 32, 97, 110, 100,
                32, 100, 111, 110, 39, 116, 32, 98, 101, 32, 115, 113, 117, 97, 114, 101, 32, 10,
                89, 111, 117, 32, 119, 97, 110, 110, 97, 32, 98, 97, 116, 116, 108, 101, 32, 109,
                101, 32, 45, 45, 32, 65, 110, 121, 116, 105, 109, 101, 44, 32, 97, 110, 121, 119,
                104, 101, 114, 101, 32, 10, 10, 89, 111, 117, 32, 116, 104, 111, 117, 103, 104,
                116, 32, 116, 104, 97, 116, 32, 73, 32, 119, 97, 115, 32, 119, 101, 97, 107, 44,
                32, 66, 111, 121, 44, 32, 121, 111, 117, 39, 114, 101, 32, 100, 101, 97, 100, 32,
                119, 114, 111, 110, 103, 32, 10, 83, 111, 32, 99, 111, 109, 101, 32, 111, 110, 44,
                32, 101, 118, 101, 114, 121, 98, 111, 100, 121, 32, 97, 110, 100, 32, 115, 105,
                110, 103, 32, 116, 104, 105, 115, 32, 115, 111, 110, 103, 32, 10, 10, 83, 97, 121,
                32, 45, 45, 32, 80, 108, 97, 121, 32, 116, 104, 97, 116, 32, 102, 117, 110, 107,
                121, 32, 109, 117, 115, 105, 99, 32, 83, 97, 121, 44, 32, 103, 111, 32, 119, 104,
                105, 116, 101, 32, 98, 111, 121, 44, 32, 103, 111, 32, 119, 104, 105, 116, 101, 32,
                98, 111, 121, 32, 103, 111, 32, 10, 112, 108, 97, 121, 32, 116, 104, 97, 116, 32,
                102, 117, 110, 107, 121, 32, 109, 117, 115, 105, 99, 32, 71, 111, 32, 119, 104,
                105, 116, 101, 32, 98, 111, 121, 44, 32, 103, 111, 32, 119, 104, 105, 116, 101, 32,
                98, 111, 121, 44, 32, 103, 111, 32, 10, 76, 97, 121, 32, 100, 111, 119, 110, 32,
                97, 110, 100, 32, 98, 111, 111, 103, 105, 101, 32, 97, 110, 100, 32, 112, 108, 97,
                121, 32, 116, 104, 97, 116, 32, 102, 117, 110, 107, 121, 32, 109, 117, 115, 105,
                99, 32, 116, 105, 108, 108, 32, 121, 111, 117, 32, 100, 105, 101, 46, 32, 10, 10,
                80, 108, 97, 121, 32, 116, 104, 97, 116, 32, 102, 117, 110, 107, 121, 32, 109, 117,
                115, 105, 99, 32, 67, 111, 109, 101, 32, 111, 110, 44, 32, 67, 111, 109, 101, 32,
                111, 110, 44, 32, 108, 101, 116, 32, 109, 101, 32, 104, 101, 97, 114, 32, 10, 80,
                108, 97, 121, 32, 116, 104, 97, 116, 32, 102, 117, 110, 107, 121, 32, 109, 117,
                115, 105, 99, 32, 119, 104, 105, 116, 101, 32, 98, 111, 121, 32, 121, 111, 117, 32,
                115, 97, 121, 32, 105, 116, 44, 32, 115, 97, 121, 32, 105, 116, 32, 10, 80, 108,
                97, 121, 32, 116, 104, 97, 116, 32, 102, 117, 110, 107, 121, 32, 109, 117, 115,
                105, 99, 32, 65, 32, 108, 105, 116, 116, 108, 101, 32, 108, 111, 117, 100, 101,
                114, 32, 110, 111, 119, 32, 10, 80, 108, 97, 121, 32, 116, 104, 97, 116, 32, 102,
                117, 110, 107, 121, 32, 109, 117, 115, 105, 99, 44, 32, 119, 104, 105, 116, 101,
                32, 98, 111, 121, 32, 67, 111, 109, 101, 32, 111, 110, 44, 32, 67, 111, 109, 101,
                32, 111, 110, 44, 32, 67, 111, 109, 101, 32, 111, 110, 32, 10, 80, 108, 97, 121,
                32, 116, 104, 97, 116, 32, 102, 117, 110, 107, 121, 32, 109, 117, 115, 105, 99, 32,
                10
            ]),
            4.950789
        );
    }

    #[test]
    fn chi_squared_from_console() {
        let the_hash: HashMap<u8, f32> = [
            (108, 0.01),
            (101, 0.01),
            (106, 0.01),
            (63, 0.62),
            (97, 0.01),
            (107, 0.31),
            (102, 0.03),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 13.080695);

        let the_hash: HashMap<u8, f32> = [
            (106, 0.31),
            (100, 0.01),
            (107, 0.01),
            (109, 0.01),
            (63, 0.63),
            (103, 0.03),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 13.222501);

        let the_hash: HashMap<u8, f32> = [
            (108, 0.01),
            (101, 0.01),
            (111, 0.03),
            (98, 0.31),
            (104, 0.01),
            (99, 0.01),
            (63, 0.62),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 13.04397);

        let the_hash: HashMap<u8, f32> = [
            (63, 0.63),
            (115, 0.01),
            (116, 0.03),
            (119, 0.01),
            (120, 0.01),
            (121, 0.31),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 13.196669);

        let the_hash: HashMap<u8, f32> = [
            (120, 0.01),
            (63, 0.66),
            (118, 0.31),
            (119, 0.01),
            (113, 0.01),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 13.635002);

        let the_hash: HashMap<u8, f32> = [
            (112, 0.31),
            (113, 0.01),
            (122, 0.01),
            (119, 0.01),
            (63, 0.66),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 13.635002);

        let the_hash: HashMap<u8, f32> = [
            (106, 0.01),
            (107, 0.31),
            (63, 0.62),
            (102, 0.03),
            (97, 0.01),
            (108, 0.01),
            (101, 0.01),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 13.080695);

        let the_hash: HashMap<u8, f32> = [
            (109, 0.01),
            (103, 0.03),
            (63, 0.63),
            (106, 0.31),
            (100, 0.01),
            (107, 0.01),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 13.222501);

        let the_hash: HashMap<u8, f32> = [
            (104, 0.01),
            (101, 0.01),
            (99, 0.01),
            (98, 0.31),
            (111, 0.03),
            (63, 0.62),
            (108, 0.01),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 13.04397);

        let the_hash: HashMap<u8, f32> = [
            (118, 0.31),
            (63, 0.66),
            (113, 0.01),
            (119, 0.01),
            (120, 0.01),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 13.635002);

        let the_hash: HashMap<u8, f32> = [
            (122, 0.01),
            (63, 0.64),
            (112, 0.31),
            (119, 0.01),
            (32, 0.02),
            (113, 0.01),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 13.348969);

        let the_hash: HashMap<u8, f32> = [
            (99, 0.01010101),
            (97, 0.1010101),
            (115, 0.05050505),
            (109, 0.02020202),
            (114, 0.05050505),
            (112, 0.01010101),
            (98, 0.02020202),
            (107, 0.01010101),
            (100, 0.01010101),
            (102, 0.02020202),
            (117, 0.02020202),
            (111, 0.04040404),
            (105, 0.030303031),
            (101, 0.08080808),
            (121, 0.030303031),
            (63, 0.08080808),
            (104, 0.05050505),
            (110, 0.04040404),
            (116, 0.030303031),
            (119, 0.04040404),
            (108, 0.030303031),
            (32, 0.22222222),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 0.28581765);

        let the_hash: HashMap<u8, f32> = [
            (99, 0.030303031),
            (109, 0.01010101),
            (112, 0.02020202),
            (106, 0.02020202),
            (103, 0.02020202),
            (63, 0.060606062),
            (105, 0.04040404),
            (101, 0.09090909),
            (115, 0.04040404),
            (97, 0.060606062),
            (114, 0.02020202),
            (98, 0.02020202),
            (107, 0.02020202),
            (119, 0.01010101),
            (108, 0.030303031),
            (111, 0.09090909),
            (32, 0.13131313),
            (121, 0.04040404),
            (110, 0.060606062),
            (116, 0.07070707),
            (100, 0.04040404),
            (102, 0.01010101),
            (104, 0.060606062),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 0.24928105);

        let the_hash: HashMap<u8, f32> = [
            (107, 0.02020202),
            (63, 0.05050505),
            (115, 0.04040404),
            (103, 0.01010101),
            (119, 0.02020202),
            (97, 0.04040404),
            (117, 0.02020202),
            (105, 0.060606062),
            (32, 0.1919192),
            (106, 0.01010101),
            (116, 0.08080808),
            (99, 0.030303031),
            (111, 0.08080808),
            (112, 0.030303031),
            (114, 0.060606062),
            (109, 0.01010101),
            (102, 0.01010101),
            (101, 0.05050505),
            (104, 0.030303031),
            (100, 0.02020202),
            (121, 0.030303031),
            (108, 0.030303031),
            (110, 0.07070707),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 0.26931465);

        let the_hash: HashMap<u8, f32> = [
            (115, 0.038247567),
            (116, 0.063630044),
            (99, 0.02503477),
            (98, 0.011474269),
            (97, 0.0608484),
            (32, 0.1954103),
            (107, 0.013908206),
            (100, 0.024687065),
            (104, 0.031293463),
            (119, 0.011474269),
            (102, 0.010083449),
            (121, 0.037552156),
            (117, 0.024687065),
            (122, 0.0020862308),
            (105, 0.056328233),
            (106, 0.0013908206),
            (103, 0.020514604),
            (110, 0.055632822),
            (114, 0.025730181),
            (109, 0.025382476),
            (112, 0.015299027),
            (120, 0.0006954103),
            (111, 0.06432545),
            (108, 0.03442281),
            (118, 0.0052155773),
            (113, 0.00034770515),
            (63, 0.075452015),
            (101, 0.06884562),
        ]
        .iter()
        .cloned()
        .collect();
        assert_eq!(chi_squared(&the_hash), 0.20198801);
    }
}
